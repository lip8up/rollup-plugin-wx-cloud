import FunctionStore from '@/FunctionStore'
import metaFile, { MetaFileOptions } from '@/metaFile'
import { join } from 'path'
import { readFile } from 'fs/promises'
import { tmpdir } from 'os'
import { source } from 'common-tags'

const fns = [
  { name: 'foo', params: [], isMain: false },
  { name: 'bar', params: ['object'], isMain: false },
  { name: 'haha', params: ['a', 'b'], isMain: true },
]

const options: Required<MetaFileOptions> = {
  prefix: '',
  clientFilePath: join(tmpdir(), 'client.ts'),
  configFilePath: join(tmpdir(), 'config.json'),
  defaultDeploy: {
    timeout: 666,
    installDependency: false
  },
  functionDeploy: {
    foo: {
      timeout: 888
    },
    bar: {
      runtime: 'Nodejs8.9'
    }
  }
}

test('metaFile', async () => {
  const store = new FunctionStore(fns.slice())
  const createOnce = metaFile(store, options)
  await createOnce()

  const { clientFilePath, configFilePath } = options

  const client = await readFile(clientFilePath!, 'utf8')
  expect(client).toEqual(source`
    //~~** This code was generated by rollup-plugin-wx-cloud, please DO NOT EDIT it. **~~
    import type functionFoo from '@cloud/functions/foo'
    import type functionBar from '@cloud/functions/bar'
    import type { main as functionHaha } from '@cloud/functions/haha'

    type PromiseType<T> = T extends Promise<infer _> ? T : Promise<T>

    type PromiseReturnType<T extends (...args: any) => any> = (...args: Parameters<T>) => PromiseType<ReturnType<T>>

    export const cloudFoo: PromiseReturnType<typeof functionFoo> = () => {
      return wx.cloud.callFunction({ name: 'foo', data: {} }).then(res => res.result as any)
    }

    export const cloudBar: PromiseReturnType<typeof functionBar> = object => {
      return wx.cloud.callFunction({ name: 'bar', data: { object } }).then(res => res.result as any)
    }

    export const cloudHaha = (data?: any): PromiseType<ReturnType<typeof functionHaha>> => {
      return wx.cloud.callFunction({ name: 'haha', data }).then(res => res.result as any)
    }

    export default {
      foo: cloudFoo,
      bar: cloudBar,
      haha: cloudHaha
    }
  `)

  const config = await readFile(configFilePath, 'utf8')
  expect(config).toEqual(source`
    {
      "functions": [
        {
          "name": "foo",
          "timeout": 888,
          "runtime": "Nodejs12.16",
          "installDependency": false
        },
        {
          "name": "bar",
          "timeout": 666,
          "runtime": "Nodejs8.9",
          "installDependency": false
        },
        {
          "name": "haha",
          "timeout": 666,
          "runtime": "Nodejs12.16",
          "installDependency": false
        }
      ]
    }
  `)
})
