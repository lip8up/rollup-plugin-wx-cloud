/**
 * 将参数列表，转成函数参数列表文本，例如 [a, b] => (a, b)。
 *
 * @param params 参数列表
 * @param arrowParens 对于单个参数，是否始终使用括号，默认 false，即对单个参数不使用括号。
 */
export declare const paramsLiteral: (params: string[], arrowParens?: boolean) => string;
/**
 * 将参数列表，转成对象文本，例如 [a, b] => { a, b }。
 *
 * @param params 参数列表
 */
export declare const objectLiteral: (params: string[]) => string;
/**
 * 不要编辑文件文本
 */
export declare const dontEditText = "//~~** This file is auto generated by tools, please DO NOT EDIT it. **~~";
/**
 * 函数配置
 */
export interface Function {
    /** 函数名 */
    name: string;
    /** 函数参数列表 */
    params: string[];
}
/**
 * 客户端函数模板类型。
 */
export declare type ClientTemplate = (prefix: string, functions: Function[]) => string;
/**
 * 默认客户端函数模板。
 *
 * @param prefix 云函数名称前缀
 * @param functions 函数列表配置
 */
export declare const clientTemplate: ClientTemplate;
/**
 * 生成 package.json 的配置。
 */
export interface Package {
    /** 包名 */
    name: string;
    /** 版本号 */
    version: string;
    /** 描述 */
    description: string;
    /** 作者 */
    author: string;
    /** 协议，默认为 MIT */
    license: string;
    /** 依赖包列表 */
    dependencies: {
        name: string;
        version: string;
    }[];
}
/**
 * 生成 package.json 函数模板类型。
 */
export declare type PackageTemplate = (pkg: Partial<Package>) => string;
/**
 * 生成 package.json 的默认函数。
 * @param pkg 配置
 */
export declare const packageTemplate: PackageTemplate;
