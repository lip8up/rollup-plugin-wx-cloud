'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var typescriptTransformWxCloud = require('typescript-transform-wx-cloud');
var path = require('path');
var commonTags = require('common-tags');
var lodash = require('lodash');
var fs = require('fs');
var promises = require('fs/promises');

function functionName(fpath) {
    const { name, dir } = path.parse(fpath);
    return name == 'index' ? path.basename(dir) : name;
}
function cloudName(prefix, name) {
    return prefix ? prefix + lodash.upperFirst(name) : name;
}

/**
 * 将参数列表，转成函数参数列表文本，例如 [a, b] => (a, b)。
 *
 * @param params 参数列表
 * @param arrowParens 对于单个参数，是否始终使用括号，默认 false，即对单个参数不使用括号。
 */
const paramsLiteral = (params, arrowParens = false) => params.length == 1 && !arrowParens ? `${params[0]}` : `(${params.join(', ')})`;
/**
 * 将参数列表，转成对象文本，例如 [a, b] => { a, b }。
 *
 * @param params 参数列表
 */
const objectLiteral = (params) => params.length == 0 ? '{}' : `{ ${params.join(', ')} }`;
/**
 * 不要编辑文件文本
 */
const dontEditText = '//~~** This file is auto generated by tools, please DO NOT EDIT it. **~~';
/**
 * 默认客户端函数模板。
 *
 * @param prefix 云函数名称前缀
 * @param functions 函数列表配置
 */
const clientTemplate = (prefix, functions) => {
    const fns = functions.map(({ name, params }) => ({
        name,
        Name: lodash.upperFirst(name),
        cloudName: cloudName(prefix, name),
        paramsText: paramsLiteral(params),
        objectText: objectLiteral(params),
    }));
    // prettier-ignore
    const text = commonTags.source `
    ${dontEditText}
    ${fns.map(({ name, Name }) => commonTags.source `
      import type function${Name} from '@cloud/functions/${name}'
    `)}

    type PromiseType<T> = T extends Promise<infer _> ? T : Promise<T>

    type PromiseReturnType<T extends (...args: any) => any> = (...args: Parameters<T>) => PromiseType<ReturnType<T>>

    ${fns.map(({ Name, cloudName, paramsText, objectText }) => commonTags.source `
      export const cloud${Name}: PromiseReturnType<typeof function${Name}> = ${paramsText} => {
        return wx.cloud.callFunction({ name: '${cloudName}', data: ${objectText} }).then(res => res.result as any)
      }
    `).join('\n\n')}

    export default {
      ${fns.map(({ name, Name }) => commonTags.source `
        ${name}: cloud${Name}
      `).join(',\n')}
    }
  `;
    return text;
};
/**
 * 生成 package.json 的默认函数。
 * @param pkg 配置
 */
const packageTemplate = pkg => {
    // 使用模板，而非 JSON.stringify，是为了保证顺序
    // prettier-ignore
    const text = commonTags.source `
    {
      "name": "${lodash.kebabCase(pkg.name)}",
      "version": "${pkg.version || '0.0.1'}",
      "description": "${pkg.description || ''}",
      "author": "${pkg.author || ''}",
      "license": "${pkg.license || 'MIT'}",
      "dependencies": {
        ${(pkg.dependencies || []).map(({ name, version }) => commonTags.source `
          "${name}": "${version}"
        `).join(',\n')}
      }
    }
  `;
    return text;
};

const isEntryChunk = (bundle) => {
    return bundle.type == 'chunk' && bundle.isEntry;
};
function createTransformerAndPlugin(options) {
    const { prefix = '', packageOptions = {}, allDependencies = {}, clientFilePath, transformerOptions } = { ...options };
    const cloudName$1 = (name) => cloudName(prefix, name);
    const functionList = [];
    const getFunction = (fpath) => {
        const funcName = functionName(fpath);
        return functionList.find(({ name }) => name == funcName);
    };
    const wxCloudTransformer = typescriptTransformWxCloud.makeTransformerFactory({
        ...transformerOptions,
        wxCloudEmitParams(fileName, params) {
            // watch 模式下，有可能重复添加
            const name = functionName(fileName);
            const newItem = { name, params };
            const index = functionList.findIndex(({ name }) => name == newItem.name);
            functionList.splice(index >= 0 ? index : functionList.length, 1, newItem);
        }
    });
    const resolveChunk = async (bundle) => {
        const chunks = Object.values(bundle).filter(isEntryChunk);
        for (const chunk of chunks) {
            const fpath = chunk.facadeModuleId?.trim();
            const func = await getFunction(fpath || '');
            if (func != null) {
                return {
                    name: func.name,
                    imports: chunk.imports
                };
            }
        }
    };
    const resolveDependencies = (imports) => {
        return imports.filter(name => name in allDependencies)
            .map(name => ({ name, version: allDependencies[name] }));
    };
    const createClientFile = async () => {
        if (clientFilePath) {
            const fpath = path.dirname(clientFilePath);
            await promises.access(fpath, fs.constants.W_OK);
            const source = clientTemplate(prefix, functionList);
            await promises.writeFile(clientFilePath, source);
        }
    };
    const createClientFileOnce = lodash.debounce(createClientFile, 666, { leading: true, trailing: false });
    const wxCloudPlugin = {
        name: 'wx-cloud',
        outputOptions(options) {
            if (options.intro == null) {
                options.intro = dontEditText;
            }
            return null;
        },
        async generateBundle(_, bundle) {
            const item = await resolveChunk(bundle);
            if (item != null) {
                const { name, imports } = item;
                const dependencies = resolveDependencies(imports);
                const source = packageTemplate({
                    ...packageOptions,
                    name: cloudName$1(name),
                    dependencies
                });
                this.emitFile({ type: 'asset', fileName: 'package.json', source });
            }
            await createClientFileOnce();
        }
    };
    const outputDirectory = (baseDir, fpath) => {
        const name = functionName(fpath);
        return path.join(baseDir, cloudName$1(name));
    };
    return { wxCloudTransformer, wxCloudPlugin, outputDirectory };
}

exports.createTransformerAndPlugin = createTransformerAndPlugin;
//# sourceMappingURL=plugin.js.map
